// Code generated by go-swagger; DO NOT EDIT.

package tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	stderrors "errors"
	"io"
	"mime/multipart"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UploadTaskFileMaxParseMemory sets the maximum size in bytes for
// the multipart form parser for this operation.
//
// The default value is 32 MB.
// The multipart parser stores up to this + 10MB.
var UploadTaskFileMaxParseMemory int64 = 32 << 20

// NewUploadTaskFileParams creates a new UploadTaskFileParams object
//
// There are no default values defined in the spec.
func NewUploadTaskFileParams() UploadTaskFileParams {

	return UploadTaskFileParams{}
}

// UploadTaskFileParams contains all the bound params for the upload task file operation
// typically these are obtained from a http.Request
//
// swagger:parameters uploadTaskFile
type UploadTaskFileParams struct {
	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Extra information describing the file
	  In: formData
	*/
	Description *string

	/*The file to upload
	  In: formData
	*/
	File io.ReadCloser

	/*The id of the item
	  Required: true
	  In: path
	*/
	ID int64
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewUploadTaskFileParams() beforehand.
func (o *UploadTaskFileParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if err := r.ParseMultipartForm(UploadTaskFileMaxParseMemory); err != nil {
		if !stderrors.Is(err, http.ErrNotMultipart) {
			return errors.New(400, "%v", err)
		} else if errParse := r.ParseForm(); errParse != nil {
			return errors.New(400, "%v", errParse)
		}
	}
	fds := runtime.Values(r.Form)

	fdDescription, fdhkDescription, _ := fds.GetOK("description")
	if err := o.bindDescription(fdDescription, fdhkDescription, route.Formats); err != nil {
		res = append(res, err)
	}

	file, fileHeader, err := r.FormFile("file")
	if err != nil {
		if !stderrors.Is(err, http.ErrMissingFile) {
			res = append(res, errors.New(400, "reading file %q failed: %v", "file", err))
		}
		// no-op for missing but optional file parameter
	} else {
		if errBind := o.bindFile(file, fileHeader); errBind != nil {
			res = append(res, errBind)
		} else {
			o.File = &runtime.File{Data: file, Header: fileHeader}
		}
	}

	rID, rhkID, _ := route.Params.GetOK("id")
	if err := o.bindID(rID, rhkID, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindDescription binds and validates parameter Description from formData.
func (o *UploadTaskFileParams) bindDescription(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Description = &raw

	return nil
}

// bindFile binds file parameter File.
//
// The only supported validations on files are MinLength and MaxLength
func (o *UploadTaskFileParams) bindFile(file multipart.File, header *multipart.FileHeader) error {
	return nil
}

// bindID binds and validates parameter ID from path.
func (o *UploadTaskFileParams) bindID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("id", "path", "int64", raw)
	}
	o.ID = value

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetTaskCommentsHandlerFunc turns a function with the right signature into a get task comments handler
type GetTaskCommentsHandlerFunc func(GetTaskCommentsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetTaskCommentsHandlerFunc) Handle(params GetTaskCommentsParams) middleware.Responder {
	return fn(params)
}

// GetTaskCommentsHandler interface for that can handle valid get task comments params
type GetTaskCommentsHandler interface {
	Handle(GetTaskCommentsParams) middleware.Responder
}

// NewGetTaskComments creates a new http.Handler for the get task comments operation
func NewGetTaskComments(ctx *middleware.Context, handler GetTaskCommentsHandler) *GetTaskComments {
	return &GetTaskComments{Context: ctx, Handler: handler}
}

/*
	GetTaskComments swagger:route GET /tasks/{id}/comments tasks getTaskComments

# Gets the comments for a task

The comments require a size parameter.
*/
type GetTaskComments struct {
	Context *middleware.Context
	Handler GetTaskCommentsHandler
}

func (o *GetTaskComments) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetTaskCommentsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// Code generated by go-swagger; DO NOT EDIT.

package experimental

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new experimental API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new experimental API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new experimental API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for experimental API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithContentType allows the client to force the Content-Type header
// to negotiate a specific Consumer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithContentType(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ConsumesMediaTypes = []string{mime}
	}
}

// WithContentTypeApplicationIoSwaggerExamplesTodoListV1JSON sets the Content-Type header to "application/io.swagger.examples.todo-list.v1+json".
func WithContentTypeApplicationIoSwaggerExamplesTodoListV1JSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/io.swagger.examples.todo-list.v1+json"}
}

// WithContentTypeApplicationJSON sets the Content-Type header to "application/json".
func WithContentTypeApplicationJSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/json"}
}

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptApplicationIoSwaggerExamplesTodoListV1JSON sets the Accept header to "application/io.swagger.examples.todo-list.v1+json".
func WithAcceptApplicationIoSwaggerExamplesTodoListV1JSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/io.swagger.examples.todo-list.v1+json"}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetExperimental(params *GetExperimentalParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetExperimentalOK, error)

	PutExperimental(params *PutExperimentalParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutExperimentalOK, *PutExperimentalNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetExperimental get experimental API
*/
func (a *Client) GetExperimental(params *GetExperimentalParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetExperimentalOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewGetExperimentalParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetExperimental",
		Method:             "GET",
		PathPattern:        "/experimental",
		ProducesMediaTypes: []string{"application/io.swagger.examples.todo-list.v1+json"},
		ConsumesMediaTypes: []string{"application/io.swagger.examples.todo-list.v1+json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetExperimentalReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*GetExperimentalOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetExperimental: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutExperimental put experimental API
*/
func (a *Client) PutExperimental(params *PutExperimentalParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutExperimentalOK, *PutExperimentalNoContent, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewPutExperimentalParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutExperimental",
		Method:             "PUT",
		PathPattern:        "/experimental",
		ProducesMediaTypes: []string{"application/io.swagger.examples.todo-list.v1+json"},
		ConsumesMediaTypes: []string{"application/io.swagger.examples.todo-list.v1+json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutExperimentalReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}

	// several success responses have to be checked
	switch value := result.(type) {
	case *PutExperimentalOK:
		return value, nil, nil
	case *PutExperimentalNoContent:
		return nil, value, nil
	}

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for experimental: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

{
  "consumes": [
    "application/json",
    "application/x-www-form-urlencoded",
    "application/xml"
  ],
  "produces": [
    "application/json",
    "application/xml"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This is a sample server Petstore server.\n\n[Learn about Swagger](http://swagger.wordnik.com) or join the IRC channel '#swagger' on irc.freenode.net.\n\nFor this sample, you can use the api key 'special-key' to test the authorization filters",
    "title": "Swagger Petstore",
    "termsOfService": "http://helloreverb.com/terms/\nSchemes:\nhttp",
    "contact": {
      "email": "apiteam@wordnik.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0"
  },
  "host": "petstore.swagger.wordnik.com",
  "basePath": "/v2",
  "paths": {
    "/pets": {
      "put": {
        "description": "Update an existing pet",
        "tags": [
          "pet"
        ],
        "operationId": "updatePet",
        "parameters": [
          {
            "description": "Pet object that needs to be added to the store",
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Pet"
            }
          }
        ]
      },
      "post": {
        "description": "Add a new pet to the store",
        "tags": [
          "pet"
        ],
        "operationId": "addPet",
        "parameters": [
          {
            "description": "Pet object that needs to be added to the store",
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Pet"
            }
          }
        ]
      }
    },
    "/pets/findByStatus": {
      "get": {
        "description": "Multiple status values can be provided with comma separated strings",
        "tags": [
          "pet"
        ],
        "summary": "Finds Pets by status",
        "operationId": "findPetsByStatus",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Status values that need to be considered for filter",
            "name": "Status",
            "in": "query"
          }
        ]
      }
    },
    "/pets/findByTags": {
      "get": {
        "description": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
        "tags": [
          "pet"
        ],
        "summary": "Finds Pets by tags",
        "operationId": "findPetsByTags",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Tags to filter by",
            "name": "Tags",
            "in": "query"
          }
        ]
      }
    },
    "/pets/{petId}": {
      "get": {
        "description": "Returns a pet when ID \u003c 10.  ID \u003e 10 or nonintegers will simulate API error conditions",
        "tags": [
          "pet"
        ],
        "summary": "Find pet by ID",
        "operationId": "getPetById",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of pet that needs to be fetched",
            "name": "PetID",
            "in": "path",
            "required": true
          }
        ]
      },
      "post": {
        "description": "Updates a pet in the store with form data",
        "tags": [
          "pet"
        ],
        "operationId": "updatePetWithForm",
        "parameters": [
          {
            "type": "string",
            "description": "Updated name of the pet",
            "name": "Name",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "ID of pet that needs to be updated",
            "name": "PetID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Updated status of the pet",
            "name": "Status",
            "in": "formData",
            "required": true
          }
        ]
      },
      "delete": {
        "description": "Deletes a pet",
        "tags": [
          "pet"
        ],
        "operationId": "deletePet",
        "parameters": [
          {
            "type": "string",
            "name": "APIKey",
            "in": "header",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Pet id to delete",
            "name": "PetID",
            "in": "path",
            "required": true
          }
        ]
      }
    },
    "/stores/order": {
      "post": {
        "description": "Place an order for a pet",
        "tags": [
          "store"
        ],
        "operationId": "placeOrder",
        "parameters": [
          {
            "description": "order placed for purchasing the pet",
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        ]
      }
    },
    "/stores/order/{orderId}": {
      "get": {
        "description": "For valid response try integer IDs with value \u003c= 5 or \u003e 10. Other values will generated exceptions",
        "tags": [
          "store"
        ],
        "summary": "Find purchase order by ID",
        "operationId": "getOrderById",
        "parameters": [
          {
            "type": "string",
            "description": "ID of pet that needs to be fetched",
            "name": "OrderID",
            "in": "path",
            "required": true
          }
        ]
      },
      "delete": {
        "description": "For valid response try integer IDs with value \u003c 1000. Anything above 1000 or nonintegers will generate API errors",
        "tags": [
          "store"
        ],
        "summary": "Delete purchase order by ID",
        "operationId": "deleteOrder",
        "parameters": [
          {
            "type": "string",
            "description": "ID of the order that needs to be deleted",
            "name": "OrderID",
            "in": "path",
            "required": true
          }
        ]
      }
    },
    "/users": {
      "post": {
        "description": "This can only be done by the logged in user.",
        "tags": [
          "user"
        ],
        "summary": "Create user",
        "operationId": "createUser",
        "parameters": [
          {
            "description": "Created user object",
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ]
      }
    },
    "/users/createWithArray": {
      "post": {
        "description": "Creates list of users with given input array",
        "tags": [
          "user"
        ],
        "operationId": "createUsersWithArrayInput",
        "parameters": [
          {
            "description": "List of user object",
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          }
        ]
      }
    },
    "/users/createWithList": {
      "post": {
        "description": "Creates list of users with given input array",
        "tags": [
          "user"
        ],
        "operationId": "createUsersWithListInput",
        "parameters": [
          {
            "description": "List of user object",
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          }
        ]
      }
    },
    "/users/login": {
      "get": {
        "description": "Logs user into the system",
        "tags": [
          "user"
        ],
        "operationId": "loginUser",
        "parameters": [
          {
            "type": "string",
            "description": "The password for login in clear text",
            "name": "Password",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The user name for login",
            "name": "Username",
            "in": "query"
          }
        ]
      }
    },
    "/users/logout": {
      "get": {
        "description": "Logs out current logged in user session",
        "tags": [
          "user"
        ],
        "operationId": "logoutUser"
      }
    },
    "/users/{username}": {
      "get": {
        "description": "Get user by user name",
        "tags": [
          "user"
        ],
        "operationId": "getUserByName",
        "parameters": [
          {
            "type": "string",
            "description": "The name that needs to be fetched. Use user1 for testing.",
            "name": "Username",
            "in": "path",
            "required": true
          }
        ]
      },
      "put": {
        "description": "This can only be done by the logged in user.",
        "tags": [
          "user"
        ],
        "summary": "Updated user",
        "operationId": "updateUser",
        "parameters": [
          {
            "description": "Updated user object",
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          {
            "type": "string",
            "description": "name that need to be deleted",
            "name": "Username",
            "in": "path",
            "required": true
          }
        ]
      },
      "delete": {
        "description": "This can only be done by the logged in user.",
        "tags": [
          "user"
        ],
        "summary": "Delete user",
        "operationId": "deleteUser",
        "parameters": [
          {
            "type": "string",
            "description": "The name that needs to be deleted",
            "name": "Username",
            "in": "path",
            "required": true
          }
        ]
      }
    }
  },
  "definitions": {
    "Category": {
      "description": "Category category",
      "type": "object",
      "properties": {
        "id": {
          "description": "id",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "name": {
          "description": "name",
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/go-swagger/go-swagger/examples/generated/models"
    },
    "DateTime": {
      "description": "DateTime is a time but it serializes to ISO8601 format with millis\nIt knows how to read 3 different variations of a RFC3339 date time.\nMost APIs we encounter want either millisecond or second precision times.\nThis just tries to make it worry-free.",
      "type": "string",
      "format": "date-time",
      "x-go-package": "github.com/go-openapi/strfmt"
    },
    "Order": {
      "description": "Order order",
      "type": "object",
      "properties": {
        "complete": {
          "description": "complete",
          "type": "boolean",
          "x-go-name": "Complete"
        },
        "id": {
          "description": "id",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "petId": {
          "description": "pet Id",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PetID"
        },
        "quantity": {
          "description": "quantity",
          "type": "integer",
          "format": "int32",
          "x-go-name": "Quantity"
        },
        "shipDate": {
          "description": "ship date\nFormat: date-time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "ShipDate"
        },
        "status": {
          "description": "Order Status",
          "type": "string",
          "x-go-name": "Status"
        }
      },
      "x-go-package": "github.com/go-swagger/go-swagger/examples/generated/models"
    },
    "Pet": {
      "description": "Pet pet",
      "type": "object",
      "required": [
        "name",
        "photoUrls"
      ],
      "properties": {
        "category": {
          "$ref": "#/definitions/Category"
        },
        "id": {
          "description": "id",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "name": {
          "description": "name",
          "type": "string",
          "x-go-name": "Name"
        },
        "photoUrls": {
          "description": "photo urls",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "PhotoUrls"
        },
        "status": {
          "description": "pet status in the store",
          "type": "string",
          "x-go-name": "Status"
        },
        "tags": {
          "description": "tags",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          },
          "x-go-name": "Tags"
        }
      },
      "x-go-package": "github.com/go-swagger/go-swagger/examples/generated/models"
    },
    "Tag": {
      "description": "Tag tag",
      "type": "object",
      "properties": {
        "id": {
          "description": "id",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "name": {
          "description": "name",
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/go-swagger/go-swagger/examples/generated/models"
    },
    "User": {
      "description": "User user",
      "type": "object",
      "properties": {
        "email": {
          "description": "email",
          "type": "string",
          "x-go-name": "Email"
        },
        "firstName": {
          "description": "first name",
          "type": "string",
          "x-go-name": "FirstName"
        },
        "id": {
          "description": "id",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "lastName": {
          "description": "last name",
          "type": "string",
          "x-go-name": "LastName"
        },
        "password": {
          "description": "password",
          "type": "string",
          "x-go-name": "Password"
        },
        "phone": {
          "description": "phone",
          "type": "string",
          "x-go-name": "Phone"
        },
        "userStatus": {
          "description": "User Status",
          "type": "integer",
          "format": "int32",
          "x-go-name": "UserStatus"
        },
        "username": {
          "description": "username",
          "type": "string",
          "x-go-name": "Username"
        }
      },
      "x-go-package": "github.com/go-swagger/go-swagger/examples/generated/models"
    }
  },
  "responses": {
    "addPetMethodNotAllowed": {
      "description": "AddPetMethodNotAllowed Invalid input"
    },
    "createUserDefault": {
      "description": "CreateUserDefault successful operation",
      "headers": {
        "_statusCode": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "createUsersWithArrayInputDefault": {
      "description": "CreateUsersWithArrayInputDefault successful operation",
      "headers": {
        "_statusCode": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "createUsersWithListInputDefault": {
      "description": "CreateUsersWithListInputDefault successful operation",
      "headers": {
        "_statusCode": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "deleteOrderBadRequest": {
      "description": "DeleteOrderBadRequest Invalid ID supplied"
    },
    "deleteOrderNotFound": {
      "description": "DeleteOrderNotFound Order not found"
    },
    "deletePetBadRequest": {
      "description": "DeletePetBadRequest Invalid pet value"
    },
    "deleteUserBadRequest": {
      "description": "DeleteUserBadRequest Invalid username supplied"
    },
    "deleteUserNotFound": {
      "description": "DeleteUserNotFound User not found"
    },
    "findPetsByStatusBadRequest": {
      "description": "FindPetsByStatusBadRequest Invalid status value"
    },
    "findPetsByStatusOK": {
      "description": "FindPetsByStatusOK successful operation",
      "headers": {
        "body": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Pet"
          },
          "description": "In: Body"
        }
      }
    },
    "findPetsByTagsBadRequest": {
      "description": "FindPetsByTagsBadRequest Invalid tag value"
    },
    "findPetsByTagsOK": {
      "description": "FindPetsByTagsOK successful operation",
      "headers": {
        "body": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Pet"
          },
          "description": "In: Body"
        }
      }
    },
    "getOrderByIdBadRequest": {
      "description": "GetOrderByIDBadRequest Invalid ID supplied"
    },
    "getOrderByIdNotFound": {
      "description": "GetOrderByIDNotFound Order not found"
    },
    "getOrderByIdOK": {
      "description": "GetOrderByIDOK successful operation",
      "schema": {
        "$ref": "#/definitions/Order"
      },
      "headers": {
        "body": {
          "description": "In: Body"
        }
      }
    },
    "getPetByIdBadRequest": {
      "description": "GetPetByIDBadRequest Invalid ID supplied"
    },
    "getPetByIdNotFound": {
      "description": "GetPetByIDNotFound Pet not found"
    },
    "getPetByIdOK": {
      "description": "GetPetByIDOK successful operation",
      "schema": {
        "$ref": "#/definitions/Pet"
      },
      "headers": {
        "body": {
          "description": "In: Body"
        }
      }
    },
    "getUserByNameBadRequest": {
      "description": "GetUserByNameBadRequest Invalid username supplied"
    },
    "getUserByNameNotFound": {
      "description": "GetUserByNameNotFound User not found"
    },
    "getUserByNameOK": {
      "description": "GetUserByNameOK successful operation",
      "schema": {
        "$ref": "#/definitions/User"
      },
      "headers": {
        "body": {
          "description": "In: Body"
        }
      }
    },
    "loginUserBadRequest": {
      "description": "LoginUserBadRequest Invalid username/password supplied"
    },
    "loginUserOK": {
      "description": "LoginUserOK successful operation",
      "headers": {
        "body": {
          "type": "string",
          "description": "In: Body"
        }
      }
    },
    "logoutUserDefault": {
      "description": "LogoutUserDefault successful operation",
      "headers": {
        "_statusCode": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "placeOrderBadRequest": {
      "description": "PlaceOrderBadRequest Invalid Order"
    },
    "placeOrderOK": {
      "description": "PlaceOrderOK successful operation",
      "schema": {
        "$ref": "#/definitions/Order"
      },
      "headers": {
        "body": {
          "description": "In: Body"
        }
      }
    },
    "updatePetBadRequest": {
      "description": "UpdatePetBadRequest Invalid ID supplied"
    },
    "updatePetMethodNotAllowed": {
      "description": "UpdatePetMethodNotAllowed Validation exception"
    },
    "updatePetNotFound": {
      "description": "UpdatePetNotFound Pet not found"
    },
    "updatePetWithFormMethodNotAllowed": {
      "description": "UpdatePetWithFormMethodNotAllowed Invalid input"
    },
    "updateUserBadRequest": {
      "description": "UpdateUserBadRequest Invalid user supplied"
    },
    "updateUserNotFound": {
      "description": "UpdateUserNotFound User not found"
    }
  }
}

// Code generated by go-swagger; DO NOT EDIT.

package pet

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeletePetHandlerFunc turns a function with the right signature into a delete pet handler
type DeletePetHandlerFunc func(DeletePetParams, any) middleware.Responder

// Handle executing the request and returning a response
func (fn DeletePetHandlerFunc) Handle(params DeletePetParams, principal any) middleware.Responder {
	return fn(params, principal)
}

// DeletePetHandler interface for that can handle valid delete pet params
type DeletePetHandler interface {
	Handle(DeletePetParams, any) middleware.Responder
}

// NewDeletePet creates a new http.Handler for the delete pet operation
func NewDeletePet(ctx *middleware.Context, handler DeletePetHandler) *DeletePet {
	return &DeletePet{Context: ctx, Handler: handler}
}

/*
	DeletePet swagger:route DELETE /pets/{petId} pet deletePet

Deletes a pet
*/
type DeletePet struct {
	Context *middleware.Context
	Handler DeletePetHandler
}

func (o *DeletePet) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewDeletePetParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal any
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

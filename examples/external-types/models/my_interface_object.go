// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	jsonext "encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
	"github.com/go-swagger/go-swagger/examples/external-types/fred"
)

// MyInterfaceObject This object demonstrates several ways to refer to an external interface.
//
// The generated code behaves as it is an interface{}: no pointers are generated, and no validation
// is required.
//
// swagger:model MyInterfaceObject
type MyInterfaceObject struct {

	// iface1
	Iface1 fred.MyAlternateInterface `json:"iface1,omitempty"`

	// Demonstrates the impact of the "interface" hint: no validation is called on iface2,
	// and no pointer is generated in spite of the "required" directive.
	//
	// The generated object validation checks for the "required" directive.
	//
	// Without the hint, the generator assumes a Validatable object, with pointer, which may
	// not build, depending on how the external type is defined.
	//
	// Required: true
	Iface2 fred.MyAlternateInterface `json:"iface2"`

	// Demonstrates the impact of the "noValidation" hint.
	//
	// Notice how we avoid the generation of a pointer on the required json.RawMessage (which is a []byte)
	// with the "nullable" hint.
	//
	// Notice that the "json" package is automatically deconflicted from other standard imports with a distinct alias.
	//
	// Required: true
	Iface3 jsonext.RawMessage `json:"iface3"`
}

// Validate validates this my interface object
func (m *MyInterfaceObject) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIface2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIface3(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MyInterfaceObject) validateIface2(formats strfmt.Registry) error {

	if m.Iface2 == nil {
		return errors.Required("iface2", "body", m.Iface2)
	}

	return nil
}

func (m *MyInterfaceObject) validateIface3(formats strfmt.Registry) error {

	if err := validate.Required("iface3", "body", m.Iface3); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this my interface object based on context it is used
func (m *MyInterfaceObject) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MyInterfaceObject) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MyInterfaceObject) UnmarshalBinary(b []byte) error {
	var res MyInterfaceObject
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package store

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// OrderGetHandlerFunc turns a function with the right signature into a order get handler
type OrderGetHandlerFunc func(OrderGetParams, any) middleware.Responder

// Handle executing the request and returning a response
func (fn OrderGetHandlerFunc) Handle(params OrderGetParams, principal any) middleware.Responder {
	return fn(params, principal)
}

// OrderGetHandler interface for that can handle valid order get params
type OrderGetHandler interface {
	Handle(OrderGetParams, any) middleware.Responder
}

// NewOrderGet creates a new http.Handler for the order get operation
func NewOrderGet(ctx *middleware.Context, handler OrderGetHandler) *OrderGet {
	return &OrderGet{Context: ctx, Handler: handler}
}

/*
	OrderGet swagger:route GET /store/order/{orderId} store orderGet

# Find purchase order by ID

For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions
*/
type OrderGet struct {
	Context *middleware.Context
	Handler OrderGetHandler
}

func (o *OrderGet) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewOrderGetParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal any
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

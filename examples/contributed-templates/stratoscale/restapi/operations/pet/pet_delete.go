// Code generated by go-swagger; DO NOT EDIT.

package pet

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PetDeleteHandlerFunc turns a function with the right signature into a pet delete handler
type PetDeleteHandlerFunc func(PetDeleteParams, any) middleware.Responder

// Handle executing the request and returning a response
func (fn PetDeleteHandlerFunc) Handle(params PetDeleteParams, principal any) middleware.Responder {
	return fn(params, principal)
}

// PetDeleteHandler interface for that can handle valid pet delete params
type PetDeleteHandler interface {
	Handle(PetDeleteParams, any) middleware.Responder
}

// NewPetDelete creates a new http.Handler for the pet delete operation
func NewPetDelete(ctx *middleware.Context, handler PetDeleteHandler) *PetDelete {
	return &PetDelete{Context: ctx, Handler: handler}
}

/*
	PetDelete swagger:route DELETE /pet/{petId} pet petDelete

Deletes a pet
*/
type PetDelete struct {
	Context *middleware.Context
	Handler PetDeleteHandler
}

func (o *PetDelete) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPetDeleteParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal any
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

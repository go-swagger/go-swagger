// Code generated by go-swagger; DO NOT EDIT.


 {{ if .Copyright -}}// {{ comment .Copyright -}}{{ end }}


package main

import (
  "fmt"
  "log"
  "net/http"
  "os"

  "github.com/go-openapi/loads"
  "github.com/go-openapi/loads/fmts"
  {{- if .UseGoStructFlags }}
  flags "github.com/jessevdk/go-flags"
  {{- end }}
  {{- if .UsePFlags }}
  flag "github.com/spf13/pflag"
  {{- end }}
  {{- if .UseFlags }}
  "flag"
  {{- end }}

  {{ imports .DefaultImports }}
  {{ imports .Imports }}
)

// This file was generated by the swagger tool.
// Make sure not to overwrite this file after you generated it because all your edits would be lost!
{{ if .ExcludeSpec }}
func init() {
  loads.AddLoader(fmts.YAMLMatcher, fmts.YAMLDoc)
}
{{ end }}

func main() {
  {{ if .UsePFlags }}
    {{- if not .ExcludeSpec }}
  swaggerSpec, err := loads.Embedded({{ .ServerPackageAlias }}.SwaggerJSON, {{ .ServerPackageAlias }}.FlatSwaggerJSON)
  if err != nil {
    log.Fatalln(err)
  }
    {{- end }}

  var server *{{ .ServerPackageAlias }}.Server // make sure init is called

	flag.Usage = func() {
    fmt.Fprint(os.Stderr, "Usage:\n")
		fmt.Fprint(os.Stderr, "  {{ dasherize .Name }}-server [OPTIONS]\n\n")

    title := {{ if .Info }}{{ if .Info.Title }}{{ printf "%q" .Info.Title }}{{ else }}{{ if .ExcludeSpec }}""{{ else }}swaggerSpec.Spec().Info.Title{{ end }}{{ end }}{{ else }}{{ if .ExcludeSpec }}""{{ else }}swaggerSpec.Spec().Info.Title{{ end }}{{ end}}
		fmt.Fprint(os.Stderr, title+"\n\n")
		desc := {{ if .Info }}{{ if .Info.Description }}{{ printf "%q" .Info.Description }}{{ else }}{{ if .ExcludeSpec }}""{{ else }}swaggerSpec.Spec().Info.Description{{ end }}{{ end }}{{ else }}{{ if .ExcludeSpec }}""{{ else }}swaggerSpec.Spec().Info.Description{{ end }}{{ end}}
    if desc != "" {
			fmt.Fprintf(os.Stderr, desc+"\n\n")
		}
		fmt.Fprintln(os.Stderr, flag.CommandLine.FlagUsages())
	}
	// parse the CLI flags
	flag.Parse()
    {{- if .ExcludeSpec }}

  server = {{ .ServerPackageAlias }}.NewServer(nil)
  swaggerSpec, err := loads.Spec(string(server.Spec))
  if err != nil {
    log.Fatalln(err)
  }
  api := {{.APIPackageAlias}}.New{{ pascalize .Name }}API(swaggerSpec)
  server.SetAPI(api)
    {{- else }}

  api := {{.APIPackageAlias}}.New{{ pascalize .Name }}API(swaggerSpec)
	// get server with flag values filled out
	server = {{ .ServerPackageAlias }}.NewServer(api)
    {{- end }}
	defer server.Shutdown()

	server.ConfigureAPI()
	if err := server.Serve(); err != nil {
		log.Fatalln(err)
	}
	{{ end }}
  {{ if .UseGoStructFlags}}
    {{- if .ExcludeSpec }}
  server := {{ .ServerPackageAlias }}.NewServer(nil)
    {{- else }}
  swaggerSpec, err := loads.Embedded({{ .ServerPackageAlias }}.SwaggerJSON, {{ .ServerPackageAlias }}.FlatSwaggerJSON)
  if err != nil {
    log.Fatalln(err)
  }

  api := {{.APIPackageAlias}}.New{{ pascalize .Name }}API(swaggerSpec)
	server := {{ .ServerPackageAlias }}.NewServer(api)
  defer server.Shutdown()
    {{- end }}

  parser := flags.NewParser(server, flags.Default)
  parser.ShortDescription = {{ if .Info }}{{ if .Info.Title }}{{ printf "%q" .Info.Title }}{{ else }}{{ if .ExcludeSpec }}""{{ else }}swaggerSpec.Spec().Info.Title{{ end }}{{ end }}{{ else }}{{ if .ExcludeSpec }}""{{ else }}swaggerSpec.Spec().Info.Title{{ end }}{{ end}}
  parser.LongDescription = {{ if .Info }}{{ if .Info.Description }}{{ printf "%q" .Info.Description }}{{ else }}{{ if .ExcludeSpec }}""{{ else }}swaggerSpec.Spec().Info.Description{{ end }}{{ end }}{{ else }}{{ if .ExcludeSpec }}""{{ else }}swaggerSpec.Spec().Info.Description{{ end }}{{ end}}

    {{- if not .ExcludeSpec }}
  server.ConfigureFlags()
  for _, optsGroup := range api.CommandLineOptionsGroups {
    _, err := parser.AddGroup(optsGroup.ShortDescription, optsGroup.LongDescription, optsGroup.Options)
    if err != nil {
      log.Fatalln(err)
    }
  }
    {{- end }}

	if _, err := parser.Parse(); err != nil {
		code := 1
		if fe, ok := err.(*flags.Error); ok {
			if fe.Type == flags.ErrHelp {
				code = 0
			}
		}
		os.Exit(code)
	}
    {{- if .ExcludeSpec }}
  swaggerSpec, err := loads.Spec(string(server.Spec))
  if err != nil {
    log.Fatalln(err)
  }

  api := {{.APIPackageAlias}}.New{{ pascalize .Name }}API(swaggerSpec)
  server.SetAPI(api)
  defer server.Shutdown()
    {{- end }}

  server.ConfigureAPI()

  if err := server.Serve(); err != nil {
    log.Fatalln(err)
  }
  {{ end }}
  {{ if .UseFlags}}
    {{- if not .ExcludeSpec }}

  swaggerSpec, err := loads.Embedded({{ .ServerPackageAlias }}.SwaggerJSON, {{ .ServerPackageAlias }}.FlatSwaggerJSON)
  if err != nil {
    log.Fatalln(err)
  }
    {{- end }}
  var server *{{ .ServerPackageAlias }}.Server // make sure init is called

	flag.Usage = func() {
    fmt.Fprint(os.Stderr, "Usage:\n")
		fmt.Fprint(os.Stderr, "  {{ dasherize .Name }}-server [OPTIONS]\n\n")

    title := {{ if .Info }}{{ if .Info.Title }}{{ printf "%q" .Info.Title }}{{ else }}{{ if .ExcludeSpec }}""{{ else }}swaggerSpec.Spec().Info.Title{{ end }}{{ end }}{{ else }}{{ if .ExcludeSpec }}""{{ else }}swaggerSpec.Spec().Info.Title{{ end }}{{ end}}
		fmt.Fprint(os.Stderr, title+"\n\n")
		desc := {{ if .Info }}{{ if .Info.Description }}{{ printf "%q" .Info.Description }}{{ else }}{{ if .ExcludeSpec }}""{{ else }}swaggerSpec.Spec().Info.Description{{ end }}{{ end }}{{ else }}{{ if .ExcludeSpec }}""{{ else }}swaggerSpec.Spec().Info.Description{{ end }}{{ end}}
    if desc != "" {
			fmt.Fprintf(os.Stderr, desc+"\n\n")
		}
		flag.CommandLine.SetOutput(os.Stderr)
    flag.PrintDefaults()
	}
	// parse the CLI flags
	flag.Parse()

    {{- if .ExcludeSpec }}

  server = {{ .ServerPackageAlias }}.NewServer(nil)
  swaggerSpec, err := loads.Spec(string(server.Spec))
  if err != nil {
    log.Fatalln(err)
  }
  api := {{.APIPackageAlias}}.New{{ pascalize .Name }}API(swaggerSpec)
  server.SetAPI(api)
    {{- else }}
  api := {{.APIPackageAlias}}.New{{ pascalize .Name }}API(swaggerSpec)
	// get server with flag values filled out
	server = {{ .ServerPackageAlias }}.NewServer(api)
    {{- end }}
	defer server.Shutdown()

	server.ConfigureAPI()
	if err := server.Serve(); err != nil {
		log.Fatalln(err)
	}
  {{ end }}
}
